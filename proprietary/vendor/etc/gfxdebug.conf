//*****************************************************************************************//
// Global config
// Attributes explanation
// 1. log_dump_path         : path to dump log
// 2. additional_conf_path  : if file exists, replace default config file with this one
// 3. logcat_grep           : decide if grep key word in logcat log
// 4. kmsg_grep             : decide if grep key word in kmsg
// 5. max_dump_count        : the max log dir number in log_dump_path, old ones will be deleted automatically
// 6. max_dump_space        : the max total size of all dumped logs, unit is MB
// 7. min_free_space        : stop dumping logs when disc space is less than this value, unit is MB
//*****************************************************************************************//
global.log_dump_path = /data/gfx_logs
global.additional_conf_path = /data/gfxdebug.conf
global.logcat_grep = 1
global.kmsg_grep = 1
global.max_dump_count = 20
global.max_dump_space = 700
global.min_free_space = 512
//*****************************************************************************************//


//*****************************************************************************************//
// Global Handlers
//  Format: ghandler.<YOUR_HANDLER_NAME>.<init or dump> = <a cmd or a script>
// Attributes explanation
// 1. init      : cmd or script to enable the handler
// 2. dump      : cmd or script to dump corresponding log
// 3. level     : log level, more verbose as the value becomes larger
//    current levels (support to add more logs in existing levels or add new levels):
//        0     : invalid
//        1     : logcat, dmesg
//        2     : dump info
//        5     : i915 tdr log
//        10    : ftrace
//        99    : hwc log
// 3. on        : if the global handler is enabled or disabled
//*****************************************************************************************//
ghandler.logcat.dump = "logcat -d > aplog"
ghandler.logcat.level = 1
ghandler.logcat.on = 1

ghandler.dmesg.dump = "dmesg > dmesg.log"
ghandler.dmesg.level = 1
ghandler.dmesg.on = 1

ghandler.hwc.init = "service call hwc.info 99"
ghandler.hwc.level = 99
ghandler.hwc.on = 0

ghandler.ftrace_bufsize.init = "echo 8192 > /d/tracing/buffer_size_kb"
ghandler.ftrace_bufsize.level = 10
ghandler.ftrace_bufsize.on = 0
//*****************************************************************************************//


//*****************************************************************************************//
// Handlers
//  Format: handler.<YOUR_HANDLER_NAME>.<init or dump> = <a cmd or a script>
// Attributes explanation (same as global handler)
//*****************************************************************************************//
handler.ftrace.init = "/system/vendor/bin/init_ftrace.sh"
handler.ftrace.dump = "cat /d/tracing/trace > ftrace_log.txt"
handler.ftrace.level = 10

handler.dump_stack.dump = "/system/vendor/bin/dump_stack"
handler.dump_stack.level = 2

handler.tdr.init = "echo 0x10 > /sys/module/drm/parameters/debug"
handler.tdr.level = 5

handler.i915_error_state.dump = "cat /d/dri/0/i915_error_state > i915_error_state"
handler.i915_error_state.level = 2

handler.i915_execlists.dump = "cat /d/dri/0/i915_execlists > i915_execlists"
handler.i915_execlists.level = 2

handler.i915_scheduler_info.dump = "cat /d/dri/0/i915_scheduler_info > i915_scheduler_info"
handler.i915_scheduler_info.level = 2

handler.i915_display_info.dump = "cat /d/dri/0/i915_display_info > i915_display_info"
handler.i915_display_info.level = 2

handler.i915_gem_gtt.dump = ""cat /d/dri/0/i915_gem_gtt > i915_gem_gtt"
handler.i915_gem_gtt.level = 2
//*****************************************************************************************//


//*****************************************************************************************//
// Events
//  Format 1 : event.<YOUR_EVENT_NAME>.<uevent, key_word or policy> = <value>
//  Format 2 : event.<YOUR_EVENT_NAME>.handler.<HANDLER_NAME>.on = <1 or 0>
//  Format 3 : event.<YOUR_EVENT_NAME>.handler.<HANDLER_NAME>.epara = <value>
//  Format 3 : event.<YOUR_EVENT_NAME>.handler.<HANDLER_NAME>.dpara = <value>
// Attributes explanation
// 1. uevent    : hint of kernel sent uevent
// 2. key_word  : will grep them in logcat and kmsg
// 3. policy    : the policy about how to dump log, e.g. "once" means only dump log while the event happened for the first time
// 4. on        : if enable this handler for this event
// 5. epara     : parameters used for handler enable
// 5. dpara     : parameters used for handler dump 
//*****************************************************************************************//
event.vblank_timeout.uevent = VB_TIMEOUT
event.vblank_timeout.key_word = "vblank wait timed out"
event.vblank_timeout.handler.ftrace.on = 1
event.vblank_timeout.handler.ftrace.epara = i915_reg_rw
event.vblank_timeout.handler.ftrace.epara = i915_flip_request
event.vblank_timeout.handler.ftrace.epara = i915_flip_complete
event.vblank_timeout.handler.ftrace.epara = i915_atomic_update_start
event.vblank_timeout.handler.ftrace.epara = i915_atomic_update_end
event.vblank_timeout.handler.ftrace.epara = i915_maxfifo_update
event.vblank_timeout.handler.ftrace.epara = i915_plane_info
event.vblank_timeout.handler.ftrace.epara = i915_pm_suspend_enter
event.vblank_timeout.handler.ftrace.epara = i915_pm_suspend_exit
event.vblank_timeout.handler.ftrace.epara = i915_pm_resume_enter
event.vblank_timeout.handler.ftrace.epara = i915_pm_resume_exit
event.vblank_timeout.handler.ftrace.epara = intel_runtime_suspend_enter
event.vblank_timeout.handler.ftrace.epara = intel_runtime_suspend_exit
event.vblank_timeout.handler.ftrace.epara = intel_runtime_resume_enter
event.vblank_timeout.handler.ftrace.epara = intel_runtime_resume_exit
event.vblank_timeout.policy = once

// Fence timeout + GPU hang
event.fencetimeout_gpuhang.key_word = "fence timeout"
event.fencetimeout_gpuhang.key_word = "GPU HANG"
event.fencetimeout_gpuhang.uevent = FENCE_TIMEOUT
event.fencetimeout_gpuhang.uevent = GPU_HANG
event.fencetimeout_gpuhang.handler.dump_stack.on = 1
event.fencetimeout_gpuhang.handler.ftrace.on = 1
event.fencetimeout_gpuhang.handler.ftrace.epara = i915_scheduler_destroy
event.fencetimeout_gpuhang.handler.ftrace.epara = i915_scheduler_fly
event.fencetimeout_gpuhang.handler.ftrace.epara = i915_scheduler_irq
event.fencetimeout_gpuhang.handler.ftrace.epara = i915_scheduler_landing
event.fencetimeout_gpuhang.handler.ftrace.epara = i915_scheduler_node_state_change
event.fencetimeout_gpuhang.handler.ftrace.epara = i915_scheduler_pop_from_queue
event.fencetimeout_gpuhang.handler.ftrace.epara = i915_scheduler_queue
event.fencetimeout_gpuhang.handler.ftrace.epara = i915_scheduler_remove
event.fencetimeout_gpuhang.handler.ftrace.epara = i915_scheduler_unfly
event.fencetimeout_gpuhang.handler.ftrace.epara = i915_gem_request_notify
event.fencetimeout_gpuhang.handler.ftrace.epara = i915_gem_request_retire
event.fencetimeout_gpuhang.handler.ftrace.epara = i915_gem_request_wait_begin
event.fencetimeout_gpuhang.handler.ftrace.epara = i915_gem_request_wait_end
event.fencetimeout_gpuhang.handler.ftrace.epara = i915_gem_ring_dispatch
event.fencetimeout_gpuhang.handler.ftrace.epara = i915_flip_complete
event.fencetimeout_gpuhang.handler.ftrace.epara = i915_flip_request
event.fencetimeout_gpuhang.handler.ftrace.epara = i915_gem_request_add
event.fencetimeout_gpuhang.handler.ftrace.epara = i915_gem_request_complete
event.fencetimeout_gpuhang.handler.ftrace.epara = i915_pm_suspend_enter
event.fencetimeout_gpuhang.handler.ftrace.epara = i915_pm_suspend_exit
event.fencetimeout_gpuhang.handler.ftrace.epara = i915_pm_resume_enter
event.fencetimeout_gpuhang.handler.ftrace.epara = i915_pm_resume_exit
event.fencetimeout_gpuhang.handler.ftrace.epara = intel_runtime_suspend_enter
event.fencetimeout_gpuhang.handler.ftrace.epara = intel_runtime_suspend_exit
event.fencetimeout_gpuhang.handler.ftrace.epara = intel_runtime_resume_enter
event.fencetimeout_gpuhang.handler.ftrace.epara = intel_runtime_resume_exit
event.fencetimeout_gpuhang.handler.ftrace.epara = execlists_elsp_write
event.fencetimeout_gpuhang.handler.ftrace.epara = execlists_context_unqueue
event.fencetimeout_gpuhang.handler.ftrace.epara = execlists_context_queue
//event.fencetimeout_gpuhang.handler.tdr.on = 1
event.fencetimeout_gpuhang.handler.i915_error_state.on = 1
event.fencetimeout_gpuhang.handler.i915_execlists.on = 1
event.fencetimeout_gpuhang.handler.i915_scheduler_info.on = 1
event.fencetimeout_gpuhang.policy = always

event.dead_lock.key_word = "__mutex_lock"
event.dead_lock.handler.dump_stack.on = 1
event.dead_lock.handler.ftrace.on = 1
event.dead_lock.handler.ftrace.epara = i915_scheduler_destroy
event.dead_lock.handler.ftrace.epara = i915_scheduler_fly
event.dead_lock.handler.ftrace.epara = i915_scheduler_irq
event.dead_lock.handler.ftrace.epara = i915_scheduler_landing
event.dead_lock.handler.ftrace.epara = i915_scheduler_node_state_change
event.dead_lock.handler.ftrace.epara = i915_scheduler_pop_from_queue
event.dead_lock.handler.ftrace.epara = i915_scheduler_queue
event.dead_lock.handler.ftrace.epara = i915_scheduler_remove
event.dead_lock.handler.ftrace.epara = i915_scheduler_unfly
event.dead_lock.handler.ftrace.epara = i915_gem_request_notify
event.dead_lock.handler.ftrace.epara = i915_gem_request_retire
event.dead_lock.handler.ftrace.epara = i915_gem_request_wait_begin
event.dead_lock.handler.ftrace.epara = i915_gem_request_wait_end
event.dead_lock.handler.ftrace.epara = i915_gem_ring_dispatch
event.dead_lock.handler.ftrace.epara = i915_flip_complete
event.dead_lock.handler.ftrace.epara = i915_flip_request
event.dead_lock.handler.ftrace.epara = i915_gem_request_add
event.dead_lock.handler.ftrace.epara = i915_gem_request_complete
event.dead_lock.handler.ftrace.epara = i915_pm_suspend_enter
event.dead_lock.handler.ftrace.epara = i915_pm_suspend_exit
event.dead_lock.handler.ftrace.epara = i915_pm_resume_enter
event.dead_lock.handler.ftrace.epara = i915_pm_resume_exit
event.dead_lock.handler.ftrace.epara = intel_runtime_suspend_enter
event.dead_lock.handler.ftrace.epara = intel_runtime_suspend_exit
event.dead_lock.handler.ftrace.epara = intel_runtime_resume_enter
event.dead_lock.handler.ftrace.epara = intel_runtime_resume_exit
event.dead_lock.handler.ftrace.epara = execlists_elsp_write
event.dead_lock.handler.ftrace.epara = execlists_context_unqueue
event.dead_lock.handler.ftrace.epara = execlists_context_queue
//event.dead_lock.handler.tdr.on = 1
event.dead_lock.policy = always
//*****************************************************************************************//


//*****************************************************************************************//
// Event group
//  Format : evtgroup.<YOUR_EVENT_GROUP_NAME>.event = <EVENT_NAME>
// Attributes explanation
// 1. event : event name defined in above section
//*****************************************************************************************//
evtgroup.all.event = vblank_timeout
evtgroup.all.event = fencetimeout_gpuhang
//evtgroup.all.event = dead_lock
//*****************************************************************************************//


//*****************************************************************************************//
// Monitor
//  Format 1 : monitor.<YOUR_MONITOR_NAME>.evtgroup = <EVENT_GROUP_NAME>
//  Format 2 : monitor.<YOUR_MONITOR_NAME>.event = <EVENT_NAME>
// Attributes explanation
// 1. event     : event name defined in above section
// 2. evtgroup  : event group name defined in above section
// 3. enable    : if enable this monitor
//*****************************************************************************************//
monitor.all.evtgroup = all
monitor.all.level = 10
monitor.all.enable = 1
//*****************************************************************************************//
